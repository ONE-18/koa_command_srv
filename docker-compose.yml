services:
  frontend:
    build: 
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
    # env_file:
    #   - ./frontend/.env
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
    depends_on:
      - mongodb
    # env_file:
    #   - ./backend/.env
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres

  mongodb:
    image: mongo:latest
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: randompassword
    volumes:
      - ./mongo/data:/data/db
      - ./mongo/dumps:/data/dumps
    command: ["--auth"]

  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://umami:umami@db:5432/umami
      DATABASE_TYPE: postgresql
      APP_SECRET: replace-me-with-a-random-string
    depends_on:
      db:
        condition: service_healthy
    init: true
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/api/heartbeat"]
      interval: 5s
      timeout: 5s
      retries: 5
  db:
    image: postgres:16.1-bullseye
    environment:
      POSTGRES_DB: umami
      POSTGRES_USER: umami
      POSTGRES_PASSWORD: umami
    volumes:
      - umami-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  umami-db-data: